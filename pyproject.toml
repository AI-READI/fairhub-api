[tool.poetry]

name = "api-fairhub-io"
version = "0.1.0"
description = "API for fairhub.io"

license = "MIT"
authors = ["FAIR Data Innovations Hub <contact@fairdataihub.org>"]

readme = "README.md"
homepage = "https://pypi.org/project/pyfairdatatools"
documentation = "https://pyfairdatatools.readthedocs.io"
repository = "https://github.com/AI-READI/pyfairdatatools"



keywords = [
]
classifiers = [
    # TODO: update this list to match your application: https://pypi.org/pypi?%3Aaction=list_classifiers
    "Development Status :: 1 - Planning",
    "Intended Audience :: Developers",
    "License :: OSI Approved",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
]


[tool.poetry.dependencies]
python = "^3.8.16"

Flask = "^2.3.2"
Flask-Cors = "^4.0.0"
flask-restx = "^1.1.0"
flask-sqlalchemy = "^3.0.5"

minilog = "*"
art = "^6.0"
jsonschema = "^4.17.3"
dicttoxml = "^1.7.16"
types-requests = "^2.30.0.0"

pyflakes = "^3.0.1"
requests = "^2.31.0"
faker = "^18.11.2"
pyfairdatatools = "0.1.3"
psycopg2 = "^2.9.6"
python-dotenv = "^1.0.0"
flask-bcrypt = "^1.0.1"
pyjwt = "^2.8.0"
email-validator = "^2.0.0.post2"


[tool.poetry.group.dev.dependencies]

# Formatters
black = "^23.3.0"
tomli = "^2.0.1"
isort = "^5.12.0"

# Linters
mypy = "^1.4.1"
pydocstyle = "^6.3.0"
pylint = "^2.17.4"

# Testing
pytest = "^7.1"
pytest-describe = "^2.0"
pytest-expecter = "^3.0"
pytest-random = "*"
pytest-cov = "^3.0"
freezegun = "*"

# Reports
coveragespace = "^6.0"

# Documentation
mkdocs = "~1.3"
pygments = "^2.11.1"

# Scripting
poethepoet = "^0.20.0"

# Jupyter
jupyter = "^1.0.0"
flake8 = "^6.0.0"

# Types
types-python-dateutil = "^2.8.19.14"

# Environment

[tool.poe.tasks]

dev = "flask run --debug"
dev_docker = "docker run -p 5000:5000 fairhub-flask-api:local"

freeze_dependencies = "pip list --format=freeze > requirements.txt"

docs = "mkdocs serve"

flake8 = "flake8 apis core model tests app.py"

format_with_isort = "isort apis core tests model app.py"
format_with_black = "black apis core tests model app.py"

format = ["format_with_isort", "format_with_black"]

typecheck = "mypy apis core model tests app.py"

pylint = "pylint apis core model tests app.py --rcfile=.pylint.ini"

lint = ["flake8", "typecheck", "pylint"]

precommit = ["format", "flake8", "typecheck", "pylint"]

test = "pytest -rx -W ignore::DeprecationWarning" 
test_with_capture = "pytest -s -W ignore::DeprecationWarning"

jupyter = "jupyter notebook"

export_requirements = "poetry export -f requirements.txt --output requirements.txt --without-hashes"
build_docker_image = "docker build --tag fairhub-flask-api:local ."

[tool.black]

quiet = true

[tool.isort]

profile = "black"

[tool.mypy]

ignore_missing_imports = true
no_implicit_optional = true
check_untyped_defs = true

cache_dir = ".cache/mypy/"

[tool.pytest.ini_options]

addopts = """
--strict-markers

-r sxX
--show-capture=log

--cov-report=html
--cov-report=term-missing:skip-covered
--no-cov-on-fail
"""

filterwarnings = [
    "ignore",
    "default:::flask_restx.*",
]

cache_dir = ".cache/pytest/"

markers = []

[build-system]
requires = ["poetry-core>=1.3.2"]
build-backend = "poetry.core.masonry.api"
